// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: proto/store.proto

package habitpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HabitServiceClient is the client API for HabitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HabitServiceClient interface {
	PerformHabit(ctx context.Context, in *PerformHabitRequest, opts ...grpc.CallOption) (*PerformHabitResponse, error)
	ListHabits(ctx context.Context, in *ListHabitsRequest, opts ...grpc.CallOption) (*ListHabitsResponse, error)
	RegisterBattle(ctx context.Context, in *BattleRequest, opts ...grpc.CallOption) (*BattleResponse, error)
	GetBattleAssociations(ctx context.Context, in *BattleAssociationsRequest, opts ...grpc.CallOption) (*BattleAssociationsResponse, error)
}

type habitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHabitServiceClient(cc grpc.ClientConnInterface) HabitServiceClient {
	return &habitServiceClient{cc}
}

func (c *habitServiceClient) PerformHabit(ctx context.Context, in *PerformHabitRequest, opts ...grpc.CallOption) (*PerformHabitResponse, error) {
	out := new(PerformHabitResponse)
	err := c.cc.Invoke(ctx, "/HabitService/PerformHabit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *habitServiceClient) ListHabits(ctx context.Context, in *ListHabitsRequest, opts ...grpc.CallOption) (*ListHabitsResponse, error) {
	out := new(ListHabitsResponse)
	err := c.cc.Invoke(ctx, "/HabitService/ListHabits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *habitServiceClient) RegisterBattle(ctx context.Context, in *BattleRequest, opts ...grpc.CallOption) (*BattleResponse, error) {
	out := new(BattleResponse)
	err := c.cc.Invoke(ctx, "/HabitService/RegisterBattle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *habitServiceClient) GetBattleAssociations(ctx context.Context, in *BattleAssociationsRequest, opts ...grpc.CallOption) (*BattleAssociationsResponse, error) {
	out := new(BattleAssociationsResponse)
	err := c.cc.Invoke(ctx, "/HabitService/GetBattleAssociations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HabitServiceServer is the server API for HabitService service.
// All implementations must embed UnimplementedHabitServiceServer
// for forward compatibility
type HabitServiceServer interface {
	PerformHabit(context.Context, *PerformHabitRequest) (*PerformHabitResponse, error)
	ListHabits(context.Context, *ListHabitsRequest) (*ListHabitsResponse, error)
	RegisterBattle(context.Context, *BattleRequest) (*BattleResponse, error)
	GetBattleAssociations(context.Context, *BattleAssociationsRequest) (*BattleAssociationsResponse, error)
	mustEmbedUnimplementedHabitServiceServer()
}

// UnimplementedHabitServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHabitServiceServer struct {
}

func (UnimplementedHabitServiceServer) PerformHabit(context.Context, *PerformHabitRequest) (*PerformHabitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformHabit not implemented")
}
func (UnimplementedHabitServiceServer) ListHabits(context.Context, *ListHabitsRequest) (*ListHabitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHabits not implemented")
}
func (UnimplementedHabitServiceServer) RegisterBattle(context.Context, *BattleRequest) (*BattleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterBattle not implemented")
}
func (UnimplementedHabitServiceServer) GetBattleAssociations(context.Context, *BattleAssociationsRequest) (*BattleAssociationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBattleAssociations not implemented")
}
func (UnimplementedHabitServiceServer) mustEmbedUnimplementedHabitServiceServer() {}

// UnsafeHabitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HabitServiceServer will
// result in compilation errors.
type UnsafeHabitServiceServer interface {
	mustEmbedUnimplementedHabitServiceServer()
}

func RegisterHabitServiceServer(s grpc.ServiceRegistrar, srv HabitServiceServer) {
	s.RegisterService(&HabitService_ServiceDesc, srv)
}

func _HabitService_PerformHabit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PerformHabitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HabitServiceServer).PerformHabit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HabitService/PerformHabit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HabitServiceServer).PerformHabit(ctx, req.(*PerformHabitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HabitService_ListHabits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHabitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HabitServiceServer).ListHabits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HabitService/ListHabits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HabitServiceServer).ListHabits(ctx, req.(*ListHabitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HabitService_RegisterBattle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BattleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HabitServiceServer).RegisterBattle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HabitService/RegisterBattle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HabitServiceServer).RegisterBattle(ctx, req.(*BattleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HabitService_GetBattleAssociations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BattleAssociationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HabitServiceServer).GetBattleAssociations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HabitService/GetBattleAssociations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HabitServiceServer).GetBattleAssociations(ctx, req.(*BattleAssociationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HabitService_ServiceDesc is the grpc.ServiceDesc for HabitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HabitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HabitService",
	HandlerType: (*HabitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PerformHabit",
			Handler:    _HabitService_PerformHabit_Handler,
		},
		{
			MethodName: "ListHabits",
			Handler:    _HabitService_ListHabits_Handler,
		},
		{
			MethodName: "RegisterBattle",
			Handler:    _HabitService_RegisterBattle_Handler,
		},
		{
			MethodName: "GetBattleAssociations",
			Handler:    _HabitService_GetBattleAssociations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/store.proto",
}
